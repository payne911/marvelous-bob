plugins { id 'org.beryx.runtime' version '1.8.4' }
apply plugin: "java"
apply plugin: "idea" // to make IDEA see build/generated/source/apt/main as source folder

sourceCompatibility = 14 // run desktop -> Tasks -> build -> jpackageImage for the ".exe"
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}
tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["../client/assets", "../common/resources"]

mainClassName = "com.marvelousbob.client.desktop.DesktopLauncher"
def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
project.ext.assetsDir = new File("../client/assets")

task runGame(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    manifest {
        attributes ('Main-Class': project.mainClassName, 'SplashScreen-Image' : 'splash_screen.png')
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar

    destinationDirectory = file("$buildDir/lib")
}

// todo: trying to add splash in jpackage (https://github.com/beryx/badass-jlink-plugin/issues/97)
tasks.jpackageImage.doLast {
    copy {
        from "$assetsDir"
        include "splash_screen.png"
        into "build/jpackage/$project.name/app"
    }
}
//jpackage {
//    jvmArgs = ["-splash:$assetsDir/splash_screen.png"]
//}
jpackageImage.dependsOn dist
dist.dependsOn classes

// JLink configuration to minimize size of generated jar
runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base' ,
               'java.desktop',
               'jdk.unsupported']
    distDir = file(buildDir)

    jpackage {
        //jpackageHome = '/usr/lib/jvm/open-jdk'
        mainJar = dist.archiveFileName.get()
        if (osName.contains('windows')) {
            imageOptions = ["--icon", file("$assetsDir/icons/icon.ico")]
        } else if (osName.contains('linux')) {
            imageOptions = ["--icon", file("$assetsDir/icons/icon.png")]
        } else if (osName.contains('mac')) {
            imageOptions = ["--icon", file("$assetsDir/icons/icon.icns")]
        }
    }
}